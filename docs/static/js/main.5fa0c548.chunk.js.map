{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCHDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEc,KAAbJ,GACHF,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OAEtCJ,EAAc,KAId,UACA,6BAAKD,IACD,uBACIM,KAAK,OACLC,MAAQP,EACRQ,SAnBc,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,c,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDZ,SAAEA,GAAe,IAAD,EAEfZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAezC,OARAC,qBAAW,WACPxB,EAAQC,GACHpB,MAAM,SAAA4C,GAAI,OAAIF,EAAS,CACpBf,KAAMiB,EACNJ,SAAS,SAElB,CAACpB,IAEGqB,EDXiBI,CAAezB,GAAhCO,EAH8B,EAG9BA,KAAMa,EAHwB,EAGxBA,QAEb,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,mBAAGJ,UAAU,gDAAb,sBACb,qBAAKA,UAAU,4DAAf,SAGYT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEkB1Be,EAjCM,WAAM,MAEYtC,mBAAS,CAAC,WAFtB,mBAEhBuC,EAFgB,KAELxC,EAFK,KAQvB,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQwC,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YClBjC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BtD,M","file":"static/js/main.5fa0c548.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(inputValue!==\"\")\r\n        setCategories(cats => [inputValue, ...cats]);\r\n\r\n        setinputValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <h3>{inputValue}</h3>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=N05ltPCxqy213dUM2ZENYwKzODPKDHMm`;\r\n    const response = await fetch( url );\r\n    const {data} = await response.json();\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetchGifts } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const {data, loading} = useFetchGifts( category );  \r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3> \r\n            {/* { loading ? 'Cargando Imagenes...' : 'Imagenes Cargadas. ALL OK'} */}\r\n            { loading && <p className=\"animate__animated animate__tada animate__slow\">Cargando</p>}\r\n            <div className=\"card-grid animate__animated animate__bounce animate__fast\">\r\n                \r\n                {\r\n                        data.map( img => (\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                {...img} />\r\n                        ))\r\n                    }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifts = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }));\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = ['Naruto', 'One piece', 'Death Note']\r\n    const [categories,setCategories] = useState(['Naruto']);\r\n\r\n    // const handleAdd = (newCategorie) => {\r\n    //     setCategories([...categories, newCategorie]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <hr />\r\n\r\n\r\n            {/* <button onClick={ }>Agregar Categoria</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n\r\n    ); \r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}